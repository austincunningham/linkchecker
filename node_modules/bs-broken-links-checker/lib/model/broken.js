/**
 * @exports
 * @class BrokenUrls
 * @desc Model for holding broken links information and methods for working with this data
 */
"use strict";

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var BrokenUrls = (function () {
  /**
   * Constructor function
   * @constructor
   */

  function BrokenUrls() {
    _classCallCheck(this, BrokenUrls);

    /**
     * Array of broken urls infos
     * @type {Array}
     */
    this._urls = [];
  }

  /**
   * Static initializer for BrokenLinks instance
   * @returns {BrokenLinks}
   * @static
   */

  _createClass(BrokenUrls, [{
    key: "add",

    /**
     * Add url with given response status code to model of broken links
     * @param {String} url - link url
     * @param {Obect} advanced - advanced data hash
     * @param {Number} code - response status code
     * @returns {exports}
     * @public
     */
    value: function add(url, advanced, code) {
      this._urls.push({ url: url, advanced: advanced, code: code });
      return this;
    }

    /**
     * Return all broken url items
     * @returns {Object[]}
     * @public
     */
  }, {
    key: "getAll",
    value: function getAll() {
      return this._urls;
    }

    /**
     * Return broken url items with given status code
     * @param {Number} code - response status code
     * @returns {Object[]}
     * @public
     */
  }, {
    key: "getByCode",
    value: function getByCode(code) {
      return this.getAll().filter(function (item) {
        return item.code === code;
      });
    }

    /**
     * Returns broken urls with response status equals to 404. Page not found error
     * @returns {Object[]}
     * @public
     */
  }, {
    key: "get404",
    value: function get404() {
      return this.getByCode(404);
    }

    /**
     * Returns broken urls with response status equals to 500. Server error
     * @returns {Object[]}
     * @public
     */
  }, {
    key: "get500",
    value: function get500() {
      return this.getByCode(500);
    }

    /**
     * Clears broken links model
     * @returns {exports}
     * @public
     */
  }, {
    key: "clear",
    value: function clear() {
      this._urls = [];
      return this;
    }
  }], [{
    key: "create",
    value: function create() {
      return new BrokenUrls();
    }
  }]);

  return BrokenUrls;
})();

exports["default"] = BrokenUrls;
module.exports = exports["default"];