'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _broken = require('./broken');

var _broken2 = _interopRequireDefault(_broken);

/**
 * @exports
 * @class Statistic
 * @desc Model for collection analyze results
 */

var Statistic = (function () {

  /**
   * Constructor function
   * @constructor
   */

  function Statistic() {
    _classCallCheck(this, Statistic);

    /**
     * Brokens links model
     * @return {Broken}
     */
    this._broken = _broken2['default'].create();

    /**
     * Number of processed external links
     * @type {Number}
     */
    this._countExternal = 0;

    /**
     * Number of processed internal links
     * @type {Number}
     */
    this._countInternal = 0;
  }

  /**
   * Static constructor for Statistic class
   * @return {Statistic}
   * @static
   */

  _createClass(Statistic, [{
    key: 'increaseInternalCount',

    /**
     * Increase count of processed internal website links
     * @returns {Statistic}
     * @public
     */
    value: function increaseInternalCount() {
      this._countInternal++;
      return this;
    }

    /**
     * Increase count of processed external website links
     * @returns {Statistic}
     * @public
     */
  }, {
    key: 'increaseExternalCount',
    value: function increaseExternalCount() {
      this._countExternal++;
      return this;
    }

    /**
     * Returns amount of processed internal website links
     * @returns {Number}
     * @public
     */
  }, {
    key: 'getInternalCount',
    value: function getInternalCount() {
      return this._countInternal;
    }

    /**
     * Returns amount of processed external website links
     * @returns {Number}
     * @public
     */
  }, {
    key: 'getExternalCount',
    value: function getExternalCount() {
      return this._countExternal;
    }

    /**
     * Returns total amount of processed links (internal and external)
     * @returns {Number}
     * @public
     */
  }, {
    key: 'getAllCount',
    value: function getAllCount() {
      return this.getExternalCount() + this.getInternalCount();
    }

    /**
     * Returns model of broken links
     * @returns {Broken}
     * @public
     */
  }, {
    key: 'getBroken',
    value: function getBroken() {
      return this._broken;
    }

    /**
     * Returns amount of founded broken links
     * @returns {Number}
     * @public
     */
  }, {
    key: 'getBrokenCount',
    value: function getBrokenCount() {
      return this.getBroken().getAll().length;
    }
  }], [{
    key: 'create',
    value: function create() {
      return new Statistic();
    }
  }]);

  return Statistic;
})();

exports['default'] = Statistic;
module.exports = exports['default'];